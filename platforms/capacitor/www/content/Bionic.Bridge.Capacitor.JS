!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";var r,i,o,a,s,c,u,l;n.r(t),function(e){e.Prompt="PROMPT",e.Camera="CAMERA",e.Photos="PHOTOS"}(r||(r={})),function(e){e.Uri="uri",e.Base64="base64"}(i||(i={})),function(e){e.Application="APPLICATION",e.Documents="DOCUMENTS",e.Data="DATA",e.Cache="CACHE",e.External="EXTERNAL",e.ExternalStorage="EXTERNAL_STORAGE"}(o||(o={})),function(e){e.UTF8="utf8",e.ASCII="ascii",e.UTF16="utf18"}(a||(a={})),function(e){e.Heavy="HEAVY",e.Medium="MEDIUM",e.Light="LIGHT"}(s||(s={})),function(e){e.Default="DEFAULT",e.Destructive="DESTRUCTIVE",e.Cancel="CANCEL"}(c||(c={})),function(e){e.Smart="smart",e.Shared="shared",e.User="user"}(u||(u={})),function(e){e.Dark="DARK",e.Light="LIGHT"}(l||(l={}));var d=new(function(){function e(){var e=this;this.Plugins={},this.platform="web",this.isNative=!1,this.Plugins=new Proxy(this.Plugins,{get:function(t,n){if(void 0===t[n]){var r=e;return new Proxy({},{get:function(e,t){return void 0===e[t]?r.pluginMethodNoop.bind(r,e,t,n):e[t]}})}return t[n]}})}return e.prototype.pluginMethodNoop=function(e,t,n){return Promise.reject(n+" does not have web implementation.")},e.prototype.getPlatform=function(){return this.platform},e.prototype.isPluginAvailable=function(e){return this.Plugins.hasOwnProperty(e)},e.prototype.handleError=function(e){console.error(e)},e}());d=window.Capacitor||d,window.Capacitor||(window.Capacitor=d);var h=d.Plugins,f=function(){function e(){this.plugins={},this.loadedPlugins={}}return e.prototype.addPlugin=function(e){this.plugins[e.config.name]=e},e.prototype.getPlugin=function(e){return this.plugins[e]},e.prototype.loadPlugin=function(e){var t=this.getPlugin(e);t?t.load():console.error("Unable to load web plugin "+e+", no such plugin found.")},e.prototype.getPlugins=function(){var e=[];for(var t in this.plugins)e.push(this.plugins[t]);return e},e}(),v=new f,p=function(){function e(e,t){this.config=e,this.loaded=!1,this.listeners={},this.windowListeners={},t?t.addPlugin(this):v.addPlugin(this)}return e.prototype.addWindowListener=function(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0},e.prototype.removeWindowListener=function(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)},e.prototype.addListener=function(e,t){var n=this;this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t);var r=this.windowListeners[e];return r&&!r.registered&&this.addWindowListener(r),{remove:function(){n.removeListener(e,t)}}},e.prototype.removeListener=function(e,t){var n=this.listeners[e];if(n){var r=n.indexOf(t);this.listeners[e].splice(r,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}},e.prototype.notifyListeners=function(e,t){this.listeners[e].forEach(function(e){return e(t)})},e.prototype.hasListeners=function(e){return!!this.listeners[e].length},e.prototype.registerWindowListener=function(e,t){var n=this;this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:function(e){n.notifyListeners(t,e)}}},e.prototype.requestPermissions=function(){return Capacitor.isNative?Capacitor.nativePromise(this.config.name,"requestPermissions",{}):Promise.resolve({results:[]})},e.prototype.load=function(){this.loaded=!0},e}(),y=function(e){for(var t=0,n=v.getPlugins();t<n.length;t++){var r=n[t];m(e,r)}},m=function(e,t){e.hasOwnProperty(t.config.name)&&!function(e){return e.config.platforms&&e.config.platforms.indexOf(Capacitor.platform)>=0}(t)||(e[t.config.name]=t)},w=function(e,t){return(w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function g(e,t){function n(){this.constructor=e}w(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function P(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})}function b(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}var B=function(e){function t(){return e.call(this,{name:"Browser",platforms:["web"]})||this}return g(t,e),t.prototype.open=function(e){return P(this,void 0,void 0,function(){return b(this,function(t){return this._lastWindow=window.open(e.url,e.windowName||"_blank"),[2,Promise.resolve()]})})},t.prototype.prefetch=function(e){return P(this,void 0,void 0,function(){return b(this,function(e){return[2,Promise.resolve()]})})},t.prototype.close=function(){return P(this,void 0,void 0,function(){return b(this,function(e){return this._lastWindow&&this._lastWindow.close(),[2,Promise.resolve()]})})},t}(p),x=new B,S=function(e){function t(){return e.call(this,{name:"Camera",platforms:["web"]})||this}return g(t,e),t.prototype.getPhoto=function(e){return P(this,void 0,void 0,function(){var e=this;return b(this,function(t){return[2,new Promise(function(t,n){return P(e,void 0,void 0,function(){var e,r=this;return b(this,function(i){switch(i.label){case 0:return e=document.createElement("ion-pwa-camera-modal"),document.body.appendChild(e),[4,e.componentOnReady()];case 1:return i.sent(),e.addEventListener("onPhoto",function(i){return P(r,void 0,void 0,function(){var r,o;return b(this,function(a){switch(a.label){case 0:return null!==(r=i.detail)?[3,1]:(n(),[3,3]);case 1:return o=t,[4,this._getCameraPhoto(r)];case 2:o.apply(void 0,[a.sent()]),a.label=3;case 3:return e.dismiss(),[2]}})})}),e.present(),[2]}})})})]})})},t.prototype._getCameraPhoto=function(e){return new Promise(function(t,n){var r=new FileReader;r.readAsDataURL(e),r.onloadend=function(){t({base64Data:r.result,webPath:r.result,format:"jpeg"})},r.onerror=function(e){n(e)}})},t}(p),_=new S,j=function(e){function t(){return e.call(this,{name:"Clipboard",platforms:["web"]})||this}return g(t,e),t.prototype.write=function(e){return P(this,void 0,void 0,function(){return b(this,function(t){switch(t.label){case 0:return navigator.clipboard?e.string||e.url?[4,navigator.clipboard.writeText(e.string||e.label)]:[3,2]:[2,Promise.reject("Clipboard API not available in this browser")];case 1:return t.sent(),[3,3];case 2:if(e.image)return[2,Promise.reject("Setting images not supported on the web")];t.label=3;case 3:return[2,Promise.resolve()]}})})},t.prototype.read=function(e){return P(this,void 0,void 0,function(){var e,t,n,r;return b(this,function(i){switch(i.label){case 0:return navigator.clipboard?[4,navigator.clipboard.read()]:[2,Promise.reject("Clipboard API not available in this browser")];case 1:for(e=i.sent(),t=0,n=e.items;t<n.length;t++)if("text/plain"===(r=n[t]).type)return[2,Promise.resolve(r.getAs("text/plain"))];return[2,Promise.reject("Unable to get data from clipboard")]}})})},t}(p),C=new j,A=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach(function(t){if(t&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}),e},L=function(e){function t(){return e.call(this,{name:"Geolocation",platforms:["web"]})||this}return g(t,e),t.prototype.getCurrentPosition=function(e){var t=this;return new Promise(function(n,r){return t.requestPermissions().then(function(t){window.navigator.geolocation.getCurrentPosition(function(e){n(e)},function(e){r(e)},A({enableHighAccuracy:!0,timeout:1e4,maximumAge:0},e))})})},t.prototype.watchPosition=function(e,t){return""+window.navigator.geolocation.watchPosition(function(e){t(e)},function(e){t(null,e)},A({enableHighAccuracy:!0,timeout:1e4,maximumAge:0},e))},t.prototype.clearWatch=function(e){return window.navigator.geolocation.clearWatch(parseInt(e.id,10)),Promise.resolve()},t}(p),k=new L,O=function(e){function t(){return e.call(this,{name:"Device",platforms:["web"]})||this}return g(t,e),t.prototype.getInfo=function(){return P(this,void 0,void 0,function(){var e,t,n;return b(this,function(r){switch(r.label){case 0:e=navigator.userAgent,t=this.parseUa(e),n={},r.label=1;case 1:return r.trys.push([1,3,,4]),[4,navigator.getBattery()];case 2:return n=r.sent(),[3,4];case 3:return r.sent(),[3,4];case 4:return[2,Promise.resolve({model:t.model,platform:"web",appVersion:"",osVersion:t.osVersion,manufacturer:navigator.vendor,isVirtual:!1,batteryLevel:n.level,isCharging:n.charging,uuid:this.getUid()})]}})})},t.prototype.parseUa=function(e){var t={},n=e.indexOf("(")+1,r=e.indexOf(") AppleWebKit");-1!==e.indexOf(") Gecko")&&(r=e.indexOf(") Gecko"));var i=e.substring(n,r);if(-1!==e.indexOf("Android"))t.model=i.replace("; wv","").split("; ").pop().split(" Build")[0],t.osVersion=i.split("; ")[1];else if(t.model=i.split("; ")[0],navigator.oscpu)t.osVersion=navigator.oscpu;else if(-1!==e.indexOf("Windows"))t.osVersion=i;else{var o=i.split("; ").pop().replace(" like Mac OS X","").split(" ");t.osVersion=o[o.length-1].replace(/_/g,".")}return t},t.prototype.getUid=function(){var e=window.localStorage.getItem("_capuid");return e||(e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),window.localStorage.setItem("_capuid",e),e)},t}(p),M=new O,D=function(e){function t(){return e.call(this,{name:"Share",platforms:["web"]})||this}return g(t,e),t.prototype.share=function(e){return navigator.share?navigator.share({title:e.title,text:e.text,url:e.url}):Promise.reject("Web Share API not available")},t}(p),E=new D,R=function(e){function t(){return e.call(this,{name:"Modals",platforms:["web"]})||this}return g(t,e),t.prototype.alert=function(e){return P(this,void 0,void 0,function(){return b(this,function(t){return window.alert(e.message),[2,Promise.resolve()]})})},t.prototype.prompt=function(e){return P(this,void 0,void 0,function(){var t;return b(this,function(n){return t=window.prompt(e.message,e.inputPlaceholder||""),[2,Promise.resolve({value:t,cancelled:null===t})]})})},t.prototype.confirm=function(e){return P(this,void 0,void 0,function(){var t;return b(this,function(n){return t=window.confirm(e.message),[2,Promise.resolve({value:t})]})})},t.prototype.showActions=function(e){return P(this,void 0,void 0,function(){var t=this;return b(this,function(n){return[2,new Promise(function(n,r){return P(t,void 0,void 0,function(){var t,r;return b(this,function(i){switch(i.label){case 0:return(t=document.querySelector("ion-action-sheet-controller"))||(t=document.createElement("ion-action-sheet-controller"),document.body.appendChild(t)),[4,t.componentOnReady()];case 1:return i.sent(),r=e.options.map(function(e,t){return{text:e.title,role:e.style&&e.style.toLowerCase()||"",icon:e.icon||"",handler:function(){n({index:t})}}}),[4,t.create({title:e.title,buttons:r})];case 2:return[4,i.sent().present()];case 3:return i.sent(),[2]}})})})]})})},t}(p),F=new R,N=function(e){function t(){var t=e.call(this,{name:"Storage",platforms:["web"]})||this;return t.KEY_PREFIX="_cap_",t}return g(t,e),t.prototype.get=function(e){var t=this;return new Promise(function(n,r){n({value:window.localStorage.getItem(t.makeKey(e.key))})})},t.prototype.set=function(e){var t=this;return new Promise(function(n,r){window.localStorage.setItem(t.makeKey(e.key),e.value),n()})},t.prototype.remove=function(e){var t=this;return new Promise(function(n,r){window.localStorage.removeItem(t.makeKey(e.key)),n()})},t.prototype.keys=function(){var e=this;return new Promise(function(t,n){t({keys:Object.keys(localStorage).filter(function(t){return e.isKey(t)}).map(function(t){return e.getKey(t)})})})},t.prototype.clear=function(){var e=this;return new Promise(function(t,n){Object.keys(localStorage).filter(function(t){return e.isKey(t)}).forEach(function(e){return window.localStorage.removeItem(e)}),t()})},t.prototype.makeKey=function(e){return this.KEY_PREFIX+e},t.prototype.isKey=function(e){return 0===e.indexOf(this.KEY_PREFIX)},t.prototype.getKey=function(e){return e.substr(this.KEY_PREFIX.length)},t}(p),I=new N,T=function(e){function t(){return e.call(this,{name:"Toast",platforms:["web"]})||this}return g(t,e),t.prototype.show=function(e){return P(this,void 0,void 0,function(){var t,n;return b(this,function(r){switch(r.label){case 0:return(t=document.querySelector("ion-toast-controller"))||(t=document.createElement("ion-toast-controller"),document.body.appendChild(t)),[4,t.componentOnReady()];case 1:return r.sent(),n=3e3,e.duration&&(n="long"===e.duration?5e3:3e3),[4,t.create({position:"bottom",message:e.text,duration:n})];case 2:return[4,r.sent().present()];case 3:return[2,r.sent()]}})})},t}(p),W=new T;y(h);var H=function(e){m(h,e)};n.d(t,"CameraSource",function(){return r}),n.d(t,"CameraResultType",function(){return i}),n.d(t,"FilesystemDirectory",function(){return o}),n.d(t,"FilesystemEncoding",function(){return a}),n.d(t,"HapticsImpactStyle",function(){return s}),n.d(t,"ActionSheetOptionStyle",function(){return c}),n.d(t,"PhotosAlbumType",function(){return u}),n.d(t,"StatusBarStyle",function(){return l}),n.d(t,"Capacitor",function(){return d}),n.d(t,"Plugins",function(){return h}),n.d(t,"registerWebPlugin",function(){return H}),n.d(t,"BrowserPluginWeb",function(){return B}),n.d(t,"Browser",function(){return x}),n.d(t,"CameraPluginWeb",function(){return S}),n.d(t,"Camera",function(){return _}),n.d(t,"ClipboardPluginWeb",function(){return j}),n.d(t,"Clipboard",function(){return C}),n.d(t,"GeolocationPluginWeb",function(){return L}),n.d(t,"Geolocation",function(){return k}),n.d(t,"DevicePluginWeb",function(){return O}),n.d(t,"Device",function(){return M}),n.d(t,"SharePluginWeb",function(){return D}),n.d(t,"Share",function(){return E}),n.d(t,"ModalsPluginWeb",function(){return R}),n.d(t,"Modals",function(){return F}),n.d(t,"StoragePluginWeb",function(){return N}),n.d(t,"Storage",function(){return I}),n.d(t,"ToastPluginWeb",function(){return T}),n.d(t,"Toast",function(){return W}),n.d(t,"WebPluginRegistry",function(){return f}),n.d(t,"WebPlugins",function(){return v}),n.d(t,"WebPlugin",function(){return p}),n.d(t,"mergeWebPlugins",function(){return y}),n.d(t,"mergeWebPlugin",function(){return m})},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Device:o}=i.Plugins;class a{static isWeb(){return a.is("web")}static isAndroid(){return a.is("android")}static isIOS(){return a.is("ios")}static is(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.resolve(!1);try{const t=yield o.getInfo();return Promise.resolve(t.platform===e)}catch(e){return Promise.reject(e.message)}})}}t.Deployment=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),i=n(4),o=n(5),a=n(6),s=n(7),c=n(8),u=n(9),l=n(10),d=n(11),h=n(12),f=n(13),v=n(14),p=n(15),y=n(16),m=n(17),w=n(18),g=n(19),P=n(20),b=n(21),B=n(22);var x;!function(e){const t="BionicBridge",n={Capacitor:{Accessibility:new B.AccessibilityBridge,App:new b.AppBridge,BackgroundTask:new P.BackgroundTaskBridge,Browser:new r.BrowserBridge,Camera:new a.CameraBridge,Clipboard:new g.ClipboardBridge,Console:new o.ConsoleBridge,Device:new s.DeviceBridge,Filesystem:new w.FilesystemBridge,Geolocation:new c.GeolocationBridge,Haptics:new m.HapticsBridge,Keyboard:new u.KeyboardBridge,Modals:new l.ModalsBridge,Motion:new y.MotionBridge,Network:new p.NetworkBridge,Share:new h.ShareBridge,SplashScreen:new v.SplashScreenBridge,StatusBar:new f.StatusBarBridge,Storage:new d.StorageBridge,Toast:new i.ToastBridge}};e.initialize=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(x||(x={})),x.initialize()},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),{Browser:a}=i.Plugins;class s{constructor(e=null,t=null){this.id=e,this.handle=t}remove(){this.handle&&(this.handle.remove(),this.handle=null)}reportFromBrowserListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportFromBrowserListener",this.id,JSON.stringify(e))}}class c{close(){return r(this,void 0,void 0,function*(){return a?yield a.close():Promise.reject("Browser not available.")})}open(e){return r(this,void 0,void 0,function*(){return a?(yield o.Deployment.isWeb())?void window.open(e.url,e.windowName):yield a.open(e):Promise.reject("Browser not available.")})}prefetch(e){return r(this,void 0,void 0,function*(){return a?yield a.prefetch(e):Promise.reject("Browser not available.")})}listenToBrowserFinished(e){return r(this,void 0,void 0,function*(){if(!a)return Promise.reject("Browser not available.");if(c.watchers.has(e))return Promise.reject("ID already in use.");try{const t=new s(e);return t.handle=a.addListener("browserFinished",t.reportFromBrowserListener),c.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}listenToBrowserPageLoaded(e){return r(this,void 0,void 0,function*(){if(!a)return Promise.reject("Browser not available.");if(c.watchers.has(e))return Promise.reject("ID already in use.");try{const t=new s(e);return t.handle=a.addListener("browserPageLoaded",t.reportFromBrowserListener),c.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}removeListener(e){return r(this,void 0,void 0,function*(){try{const t=c.watchers.get(e);return t&&t.handle&&(t.remove(),c.watchers.delete(e)),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}c.watchers=new Map,t.BrowserBridge=c},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Toast:o}=i.Plugins;t.ToastBridge=class{show(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Toast not available.");yield o.show(e)})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.ConsoleBridge=class{log(e){return r(this,void 0,void 0,function*(){yield console.log(e)})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Camera:o}=i.Plugins;t.CameraBridge=class{getPhoto(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Camera not available.");try{const t=yield o.getPhoto(e);return new Promise(e=>e(t))}catch(e){return new Promise((t,n)=>n(e.message))}})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Device:o}=i.Plugins;t.DeviceBridge=class{getInfo(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Device not available.");try{const e=yield o.getInfo();return new Promise(t=>t(e))}catch(e){return new Promise((t,n)=>n(e.message))}})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Geolocation:o}=i.Plugins;class a{constructor(){this.id=null}geolocationCallback(e,t){t?console.log(`Got position error: ${t.message?t.message:t}`):DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportNewPosition",this.id,new c(e))}}class s{constructor(e){this.latitude=e.latitude?e.latitude:null,this.longitude=e.longitude?e.longitude:null,this.accuracy=e.accuracy?e.accuracy:null,this.altitude=e.altitude?e.altitude:null,this.altitudeAccuracy=e.altitudeAcuracy?e.altitudeAcuracy:null,this.speed=e.speed?e.speed:null,this.heading=e.heading?e.heading:null}}class c{constructor(e){this.timestamp=e.timestamp?e.timestamp:null,this.coords=new s(e.coords)}}class u{clearWatch(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Geolocation not available.");try{return yield o.clearWatch({id:e}),u.watchers.delete(e),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}getCurrentPosition(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Geolocation not available.");try{const e=new c(yield o.getCurrentPosition());return new Promise(t=>t(e))}catch(e){return new Promise((t,n)=>n(e.message))}})}watchPosition(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Geolocation not available.");try{const t=new a,n=yield o.watchPosition(e,t.geolocationCallback.bind(t));return t.id=n,u.watchers.set(n,t),new Promise(e=>e(n))}catch(e){return new Promise((t,n)=>n(e.message))}})}}u.watchers=new Map,t.GeolocationBridge=u},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Keyboard:o}=i.Plugins;t.KeyboardBridge=class{show(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.show(),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}hide(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.hide(),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}setAccessoryBarVisible(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.setAccessoryBarVisible({isVisible:e}),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}registerEventListeners(){return r(this,void 0,void 0,function*(){if(!o||!window)return Promise.reject("Keyboard not available.");try{return window.addEventListener("keyboardWillShow",e=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardWillShow",JSON.stringify(e))}),window.addEventListener("keyboardDidShow",e=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardDidShow",JSON.stringify(e))}),window.addEventListener("keyboardWillHide",()=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardWillHide")}),window.addEventListener("keyboardDidHide",()=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardDidHide")}),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Modals:o}=i.Plugins;t.ModalsBridge=class{alert(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.alert(e)}catch(e){return new Promise((t,n)=>n(e.message))}})}confirm(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.confirm(e)}catch(e){return new Promise((t,n)=>n(e.message))}})}prompt(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.prompt(e)}catch(e){return new Promise((t,n)=>n(e.message))}})}showActions(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.showActions(e)}catch(e){return new Promise((t,n)=>n(e.message))}})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Storage:o}=i.Plugins;t.StorageBridge=class{clear(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.clear()}catch(e){return new Promise((t,n)=>n(e.message))}})}get(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Storage not available.");try{const t=yield o.get({key:e});return new Promise(e=>e(t?JSON.parse(t.value):null))}catch(e){return new Promise((t,n)=>n(e.message))}})}set(e,t){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.set({key:e,value:JSON.stringify(t)})}catch(e){return new Promise((t,n)=>n(e.message))}})}keys(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Storage not available.");try{const e=yield o.keys();return new Promise(t=>t(e&&e.keys?e.keys:[]))}catch(e){return new Promise((t,n)=>n(e.message))}})}remove(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.remove({key:e})}catch(e){return new Promise((t,n)=>n(e.message))}})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Share:o}=i.Plugins;t.ShareBridge=class{share(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Share not available.");yield o.share(e)})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{StatusBar:o}=i.Plugins;t.StatusBarBridge=class{show(){return r(this,void 0,void 0,function*(){return o?yield o.show():Promise.reject("StatusBar not available.")})}hide(){return r(this,void 0,void 0,function*(){return o?yield o.hide():Promise.reject("StatusBar not available.")})}setBackgroundColor(e){return r(this,void 0,void 0,function*(){return o?yield o.setBackgroundColor({color:e}):Promise.reject("StatusBar not available.")})}setStyle(e){return r(this,void 0,void 0,function*(){return o?yield o.setStyle({style:0===e?i.StatusBarStyle.Dark:i.StatusBarStyle.Light}):Promise.reject("StatusBar not available.")})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{SplashScreen:o}=i.Plugins;t.SplashScreenBridge=class{show(e){return r(this,void 0,void 0,function*(){return o?yield o.show(e):Promise.reject("SplashScreen not available.")})}hide(e){return r(this,void 0,void 0,function*(){return o?yield o.hide(e):Promise.reject("SplashScreen not available.")})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Network:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}networkListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportNetworkStatus",this.id,e)}}class s{getStatus(){return r(this,void 0,void 0,function*(){return o?yield o.getStatus():Promise.reject("Network not available.")})}addListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Network not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("networkStatusChange",t.networkListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}removeListener(e){return r(this,void 0,void 0,function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}s.watchers=new Map,t.NetworkBridge=s},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),{Motion:a}=i.Plugins;class s{constructor(){this.id=null,this.handler=null,this.type="deviceorientation"}remove(){this.handler&&(this.handler.remove(),this.handler=null)}motionAccelListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportMotionAccel",this.id,{acceleration:e.acceleration?{x:e.acceleration.x,y:e.acceleration.y,z:e.acceleration.z}:null,accelerationIncludingGravity:e.accelerationIncludingGravity?{x:e.accelerationIncludingGravity.x,y:e.accelerationIncludingGravity.y,z:e.accelerationIncludingGravity.z}:null,rotationRate:e.rotationRate?{alpha:e.rotationRate.alpha,beta:e.rotationRate.beta,gamma:e.rotationRate.gamma}:null,interval:e.interval})}motionOrientationListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportMotionOrientation",this.id,{alpha:e.alpha,beta:e.beta,gamma:e.gamma})}}function c(){const e="string"==typeof window.orientation?parseInt(window.orientation):window.orientation;DotNet.invokeMethodAsync("BionicBridgeCapacitor","OnOrientationChange",e)}class u{getOrientation(){return r(this,void 0,void 0,function*(){const e="string"==typeof window.orientation?parseInt(window.orientation):window.orientation;return Promise.resolve(e)})}startOrientationChangeListener(){return r(this,void 0,void 0,function*(){addEventListener("orientationchange",c)})}stopOrientationChangeListener(){return r(this,void 0,void 0,function*(){removeEventListener("orientationchange",c)})}addAccelListener(e){return r(this,void 0,void 0,function*(){try{const t=new s;if(t.id=e,t.eventHandler=t.motionAccelListener.bind(t),yield o.Deployment.isWeb()){if(t.type="devicemotion",!DeviceMotionEvent)return new Promise((e,t)=>t("Detected web deployment but DeviceMotionEvent is not available"));addEventListener("devicemotion",t.eventHandler,!1)}else{if(!a)return Promise.reject("Motion not available.");t.handler=yield a.addListener("accel",t.eventHandler)}return u.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}addOrientationListener(e){return r(this,void 0,void 0,function*(){try{const t=new s;if(t.id=e,t.eventHandler=t.motionOrientationListener.bind(t),yield o.Deployment.isWeb()){if(t.type="deviceorientation",!DeviceOrientationEvent)return new Promise((e,t)=>t("Detected web deployment but DeviceOrientationEvent is not available"));addEventListener("deviceorientation",t.eventHandler,!1)}else{if(!a)return Promise.reject("Motion not available.");t.handler=yield a.addListener("orientation",t.eventHandler)}return u.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}removeListener(e){return r(this,void 0,void 0,function*(){try{const t=u.watchers.get(e);return t&&((yield o.Deployment.isWeb())?removeEventListener(t.type,t.eventHandler):t.remove(),u.watchers.delete(e)),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}u.watchers=new Map,t.MotionBridge=u},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Haptics:o}=i.Plugins;t.HapticsBridge=class{vibrate(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Haptics not available.");yield o.vibrate()})}impact(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Haptics not available.");let t=i.HapticsImpactStyle.Light;switch(e){case 0:t=i.HapticsImpactStyle.Heavy;break;case 1:t=i.HapticsImpactStyle.Medium}yield o.impact({style:t})})}selectionStart(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionStart()})}selectionChanged(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionChanged()})}selectionEnd(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionEnd()})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Filesystem:o}=i.Plugins;class a{appendFile(e){return r(this,void 0,void 0,function*(){return o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.appendFile(e)):Promise.reject("Filesystem not available.")})}deleteFile(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.deleteFile(e)):Promise.reject("Filesystem not available.")})}getUri(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.getUri(e)):Promise.reject("Filesystem not available.")})}mkdir(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.mkdir(e)):Promise.reject("Filesystem not available.")})}readFile(e){return r(this,void 0,void 0,function*(){return o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.readFile(e)):Promise.reject("Filesystem not available.")})}readdir(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.readdir(e)):Promise.reject("Filesystem not available.")})}rmdir(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.rmdir(e)):Promise.reject("Filesystem not available.")})}stat(e){return r(this,void 0,void 0,function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.stat(e)):Promise.reject("Filesystem not available.")})}writeFile(e){return r(this,void 0,void 0,function*(){return console.log(e),o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.writeFile(e)):Promise.reject("Filesystem not available.")})}static translateEncode(e){switch(e){case 1:return i.FilesystemEncoding.ASCII;case 2:return i.FilesystemEncoding.UTF16;default:return i.FilesystemEncoding.UTF8}}static translateDirectory(e){switch(e){case 1:return i.FilesystemDirectory.Documents;case 2:return i.FilesystemDirectory.Data;case 3:return i.FilesystemDirectory.Cache;case 4:return i.FilesystemDirectory.External;case 5:return i.FilesystemDirectory.ExternalStorage;default:return i.FilesystemDirectory.Application}}}t.FilesystemBridge=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Clipboard:o}=i.Plugins;class a{read(e){return r(this,void 0,void 0,function*(){return o?yield o.read({type:a.translateClipboardType(e)}):Promise.reject("Clipboard not available.")})}write(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("Clipboard not available.");yield o.write({string:e.str,image:e.image,url:e.url,label:e.label})})}static translateClipboardType(e){switch(e){case 1:return"url";case 2:return"image";default:return"string"}}}t.ClipboardBridge=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{BackgroundTask:o}=i.Plugins;class a{constructor(){this.id=null}beforeExitCallback(){DotNet.invokeMethodAsync("BionicBridgeCapacitor","NotifyBeforeExit",this.id)}}class s{beforeExit(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("BackgroundTask not available.");try{const e=new a,t=yield o.beforeExit(e.beforeExitCallback.bind(e));return e.id=t,s.watchers.set(t,e),new Promise(e=>e(t))}catch(e){return new Promise((t,n)=>n(e.message))}})}finish(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("BackgroundTask not available.");try{return s.watchers.delete(e),yield o.finish({taskId:e})}catch(e){return new Promise((t,n)=>n(e.message))}})}}s.watchers=new Map,t.BackgroundTaskBridge=s},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{App:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}appStateChangeListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppStateChange",this.id,e)}appUrlOpenListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppUrlOpen",this.id,e)}appRestoredResultListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppRestoredResult",this.id,e)}backButtonListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportBackButton",this.id,e)}}class s{canOpenUrl(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");const t=yield o.canOpenUrl({url:e});return!!t&&t.value})}exitApp(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");yield o.exitApp()})}getLaunchUrl(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");const e=yield o.getLaunchUrl();return e&&e.url?e.url:null})}openUrl(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");const t=yield o.openUrl({url:e});return!!t&&t.completed})}addAppStateChangeListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appStateChange",t.appStateChangeListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}addAppUrlOpenListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appUrlOpen",t.appUrlOpenListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}addAppRestoredResultListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appRestoredResult",t.appRestoredResultListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}addBackButtonListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("backButton",t.backButtonListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}removeListener(e){return r(this,void 0,void 0,function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}s.watchers=new Map,t.AppBridge=s},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),{Accessibility:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}accessibilityScreenReaderStateChangeListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAccessibilityScreenReaderStateChange",this.id,!(!e||!e.value)&&e.value)}}class s{isScreenReaderEnabled(){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");const e=yield o.isScreenReaderEnabled();return!!e&&e.value})}speak(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");yield o.speak(e)})}addListener(e){return r(this,void 0,void 0,function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("accessibilityScreenReaderStateChange",t.accessibilityScreenReaderStateChangeListener.bind(t)),s.watchers.set(e,t),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}removeListener(e){return r(this,void 0,void 0,function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise(e=>e())}catch(e){return new Promise((t,n)=>n(e.message))}})}}s.watchers=new Map,t.AccessibilityBridge=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,